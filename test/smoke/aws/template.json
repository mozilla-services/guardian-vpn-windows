{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.medium",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "IPLocation" : {
      "Description" : "The IP address range that can be used to RDP to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "ImageId": {
      "Description" : "AWS AMI Id",
      "Type": "String"
    },
    "BuildNumber": {
      "Description" : "CIRCLE_BUILD_NUM",
      "Type": "String"
    },
    "S3BucketName": {
      "Description" : "S3 Bucket Name",
      "Type": "String"
    },
    "GitBranch": {
      "Description" : "Github Branch",
      "Type": "String"
        },
    "GitPrivateKeyPart1": {
      "Description" : "Github Private Key part 1",
      "Type": "String"
    },
    "GitPrivateKeyPart2": {
      "Description" : "Github Private Key part 2",
      "Type": "String"
    },
    "GitPublicKey": {
      "Description" : "Github Public Key",
      "Type": "String"
    },
    "KeyValue": {
      "Description" : "key value",
      "Type": "String"
    },
    "StageUrl": {
      "Description" : "stage url",
      "Type": "String"
    },
    "TestExistedUserName": {
      "Description" : "existed user name for testing",
      "Type": "String"
    },
    "TestExistedPassword": {
      "Description" : "existed user password for testing",
      "Type": "String"
    }
  },

  "Resources" : {
    "EC2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Ref" : "ImageId" },
        "IamInstanceProfile" : {
          "Ref" : "ReadWriteS3BucketsInstanceProfile"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<powershell>\n",
                "Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False \n",
                "New-ItemProperty -Path \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" -Name DisableAntiSpyware -Value 1 -PropertyType DWORD -Force \n",             

                "$AutoUpdate = (New-Object -com \"Microsoft.Update.AutoUpdate\").Settings \n",
                "$AutoUpdate.NotificationLevel = 1 \n",
                "$AutoUpdate.Save() \n",
                "Write-Host \"Windows Update has been disabled.\" -ForegroundColor Green \n",
                
                "[Environment]::SetEnvironmentVariable('BUILD_NUMBER', '",
                {
                  "Ref": "BuildNumber"
                },
                "', [EnvironmentVariableTarget]::Machine) \n",
                "[Environment]::SetEnvironmentVariable('S3_BUCKET', '",
                {
                  "Ref": "S3BucketName"
                },
                "', [EnvironmentVariableTarget]::Machine) \n",
                "[Environment]::SetEnvironmentVariable('EXISTED_USER_NAME', '",
                {
                  "Ref": "TestExistedUserName"
                },
                "', [EnvironmentVariableTarget]::Machine) \n",
                "[Environment]::SetEnvironmentVariable('EXISTED_USER_PASSWORD', '",
                {
                  "Ref": "TestExistedPassword"
                },
                "', [EnvironmentVariableTarget]::Machine) \n",

                "$env:BUILD_NUMBER = [System.Environment]::GetEnvironmentVariable(\"BUILD_NUMBER\",\"Machine\") \n",
                "$env:S3_BUCKET = [System.Environment]::GetEnvironmentVariable(\"S3_BUCKET\",\"Machine\") \n",

                "Write-Host 'Generating Git RSA...' \n",
                "$id_rsa = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('",
                {
                  "Ref": "GitPrivateKeyPart1"
                },
                {
                  "Ref":"GitPrivateKeyPart2"
                },
                "')) \n",
                "$key_value = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('",
                {
                  "Ref": "KeyValue"
                },
                "')) \n",
                "$id_rsa_pub = '",
                {
                  "Ref": "GitPublicKey"
                },
                "' \n",
                "$Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False \n",
                "[System.IO.File]::WriteAllLines( 'C:/Users/Administrator/.ssh/id_rsa', $id_rsa , $Utf8NoBomEncoding)\n",
                "[System.IO.File]::WriteAllLines( 'C:/Users/Administrator/.ssh/id_rsa.pub', $id_rsa_pub , $Utf8NoBomEncoding)\n",
                "[System.IO.File]::WriteAllLines( 'C:/Users/Administrator/guardian.txt', $key_value , $Utf8NoBomEncoding)\n",
                "Write-Host 'Complete.' \n",

                "Write-Host 'Start downloading the repo...'\n",
                "cd C:\\Users\\Administrator \n",
                "git clone git@github.com:mozilla-services/guardian-vpn-windows.git \n",
                "cd guardian-vpn-windows \n",
                "git fetch --force origin ",
                {
                  "Ref": "GitBranch"
                },
                "/head:remotes/origin/",
                {
                  "Ref": "GitBranch"
                },"\n",
                "git checkout ",
                {
                  "Ref": "GitBranch"
                },"\n",
                "Write-Host Downloaded!\n",              

                "Write-Host 'Start Installing MSI' \n",
                "cd C:\\Users\\Administrator \n",
                "Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force \n",
                "Install-Module -Name AWS.Tools.S3,AWS.Tools.EC2 -Scope AllUsers -Force \n",
                "Read-S3Object -BucketName $env:S3_BUCKET -Key msi/$env:BUILD_NUMBER/FirefoxPrivateNetworkVPN.msi -File FirefoxPrivateNetworkVPN.msi \n",
                "Start-Process msiexec.exe -Wait -ArgumentList '/I FirefoxPrivateNetworkVPN.msi /quiet' -Verb RunAs \n",  
                "Write-Host 'Complete.' \n",      

                "Write-Host 'Update Config file' \n",
                "$env:Settings = \"[FxA] \n",
                "BaseURL = ",
                {
                  "Ref": "StageUrl"
                },
                "\" \n",
                "If(!(Test-Path C:\\Users\\Administrator\\AppData\\Local\\Mozilla\\FirefoxPrivateNetworkVPN)) { New-Item -ItemType directory -Path C:\\Users\\Administrator\\AppData\\Local\\Mozilla\\FirefoxPrivateNetworkVPN } \n",
                "Set-Content -Path C:\\Users\\Administrator\\AppData\\Local\\Mozilla\\FirefoxPrivateNetworkVPN\\settings.conf -Value $env:Settings \n",
                "Write-Host 'Complete.' \n", 

                "Write-Host 'Build Smoke Test App' \n",
                "cd C:\\Users\\Administrator\\guardian-vpn-windows\\test\\smoke\\FirefoxPrivateVPNUITest \n",
                "C:\\nuget.exe restore -SolutionDirectory ./ \n",
                "& 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe' /t:Rebuild /p:Configuration=Release \n",
                "Write-Host 'Finish building the app' \n",
                
                "Write-Host 'Install WinAppDriver' \n",
                "reg add \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModelUnlock\" /t REG_DWORD /f /v \"AllowDevelopmentWithoutDevLicense\" /d \"1\" \n",
                "Invoke-WebRequest -Uri https://github.com/microsoft/WinAppDriver/releases/download/v1.2-RC/WindowsApplicationDriver.msi -OutFile WindowsApplicationDriver.msi \n",
                "Start-Process msiexec.exe -Wait -ArgumentList '/I WindowsApplicationDriver.msi /quiet' \n",
                "Write-Host 'Complete' \n",

                "$RegPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" \n",
                "$InstanceId = Get-EC2InstanceMetadata -Category InstanceId \n",
                "$env:DEFAULT_PASSWORD = Get-EC2PasswordData -InstanceId $InstanceId -PemFile C:/Users/Administrator/guardian.txt \n",
                "Set-ItemProperty $RegPath \"AutoAdminLogon\" -Value \"1\" -type String \n",
                "Set-ItemProperty $RegPath \"DefaultUsername\" -Value \"administrator\" -type String \n",
                "Set-ItemProperty $RegPath \"DefaultPassword\" -Value \"$env:DEFAULT_PASSWORD\" -type String \n",
                "Write-Host \"Restarting Computer.\" \n",
                "Restart-Computer -Force \n",
                "</powershell>"
              ]
            ]
          }
        }
      }
    },
    "ReadWriteS3BucketsInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [
          {
            "Ref" : "ReadWriteS3BucketsRole"
          }
        ]
      }
    },
    "ReadWriteS3BucketsPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "ReadWriteS3BucketsPolicy",
        "PolicyDocument" : {
          "Statement" : [
            {
              "Effect" : "Allow",
              "Action" : [
                "s3:GetObject",
                "s3:PutObject",
                "s3:PutObjectAcl"
              ],
              "Resource" :{
                "Fn::Join": [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3BucketName"
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2:GetPasswordData"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles" : [
          {
            "Ref" : "ReadWriteS3BucketsRole"
          }
        ]
      }
    },
    "ReadWriteS3BucketsRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement" : [
            {
              "Effect" : "Allow",
              "Principal" : {
                "Service" : ["ec2.amazonaws.com"]
              },
              "Action" : [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path" : "/"
      }
    },
    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable RDP via port 3389",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "3389",
          "ToPort" : "3389",
          "CidrIp" : { "Ref" : "IPLocation"}
        } ]
      }
    }
  },

  "Outputs" : {
    "InstanceId" : {
      "Description" : "InstanceId of the newly created EC2 instance",
      "Value" : { "Ref" : "EC2Instance" }
    },
    "AZ" : {
      "Description" : "Availability Zone of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "AvailabilityZone" ] }
    },
    "PublicDNS" : {
      "Description" : "Public DNSName of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "PublicDnsName" ] }
    },
    "PublicIP" : {
      "Description" : "Public IP address of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "PublicIp" ] }
    }
  }
}
